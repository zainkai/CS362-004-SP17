Testing Smithy!
Test Passed: 300, Test Failed: 0
File 'dominion.c'
Lines executed:25.99% of 558
Creating 'dominion.c.gcov'

Testing Smithy!
Test Passed: 300, Test Failed: 0
File 'dominion.c'
Lines executed:28.67% of 558
Creating 'dominion.c.gcov'

Testing Smithy!
Test Passed: 300, Test Failed: 0
File 'dominion.c'
Lines executed:28.67% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    40773:    8:int compare(const void* a, const void* b) {
    40773:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    40773:   11:  if (*(int*)a < *(int*)b)
     9704:   12:    return -1;
    31069:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
     2000:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     1016:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      984:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    10824:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   108240:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    98400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      984:   73:  if (numPlayers == 2)
        -:   74:    {
      526:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      458:   77:  else if (numPlayers == 3)
        -:   78:    {
      458:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      984:   87:  if (numPlayers == 2)
        -:   88:    {
      526:   89:      state->supplyCount[estate] = 8;
      526:   90:      state->supplyCount[duchy] = 8;
      526:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      458:   95:      state->supplyCount[estate] = 12;
      458:   96:      state->supplyCount[duchy] = 12;
      458:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      984:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      984:  102:  state->supplyCount[silver] = 40;
      984:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    20664:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   163176:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   153234:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     9738:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2172:  115:		  if (numPlayers == 2){
      584:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
      502:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     8652:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     9738:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   143496:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3410:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     2426:  140:      state->deckCount[i] = 0;
     9704:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     7278:  143:	  state->deck[i][j] = estate;
     7278:  144:	  state->deckCount[i]++;
        -:  145:	}
    19408:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    16982:  148:	  state->deck[i][j] = copper;
    16982:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3410:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     2426:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3410:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     2426:  166:      state->handCount[i] = 0;
     2426:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i,temphand state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    27552:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    26568:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      984:  182:  state->outpostPlayed = 0;
      984:  183:  state->phase = 0;
      984:  184:  state->numActions = 1;
      984:  185:  state->numBuys = 1;
      984:  186:  state->playedCardCount = 0;
      984:  187:  state->whoseTurn = 0;
      984:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     5904:  192:  for (it = 0; it < 5; it++){
     4920:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      984:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      984:  198:  return 0;
        -:  199:}
        -:  200:
     2432:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2432:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2432:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     2432:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    30270:  214:  while (state->deckCount[player] > 0) {
    25406:  215:    card = floor(Random() * state->deckCount[player]);
    25406:  216:    newDeck[newDeckPos] = state->deck[player][card];
    25406:  217:    newDeckPos++;
   155822:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   130416:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    25406:  221:    state->deckCount[player]--;
        -:  222:  }
    27838:  223:  for (i = 0; i < newDeckPos; i++) {
    25406:  224:    state->deck[player][i] = newDeck[i];
    25406:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2432:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    59068:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    59068:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1152:  533:    for (i = 0; i < state->discardCount[player];i++){
     1146:  534:      state->deck[player][i] = state->discard[player][i];
     1146:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        6:  538:    state->deckCount[player] = state->discardCount[player];
        6:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        6:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        6:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        6:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        6:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        6:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        6:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  563:    state->deckCount[player]--;
        6:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    59062:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    59062:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    59062:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    59062:  576:    state->deckCount[player]--;
    59062:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    59068:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      200:  646:int adventurerCard(int drawntreasure,
        -:  647:                   struct gameState *state,
        -:  648:                   int currentPlayer,
        -:  649:                   int z,
        -:  650:                   int cardDrawn,
        -:  651:                   int temphand[])
        -:  652:{
    51848:  653:    while(drawntreasure<2){
    51448:  654:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:	  shuffle(currentPlayer, state);
        -:  656:	}
    51448:  657:	drawCard(currentPlayer, state);
    51448:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    51448:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
      400:  660:          drawntreasure++;
        -:  661:          //printf("Drawn Treasure %d", drawntreasure);
        -:  662:	}else{
        -:  663:          //printf("z is %d\n",z);
    51048:  664:          temphand[z]=cardDrawn;
    51048:  665:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    51048:  666:          z++;
        -:  667:	}
        -:  668:      }
    51448:  669:      while(z-1>=0){
    51048:  670:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    51048:  671:        z=z-1;
        -:  672:      }
      200:  673:      return 0;
        -:  674:}
        -:  675:
      900:  676:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  677:{
        -:  678:      //+3 Cards
     3600:  679:      for (i = 0; i < 3; i++)
        -:  680:	{
     2700:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:
        -:  684:      //discard card from hand
      900:  685:      discardCard(handPos, currentPlayer, state, 0);
      900:  686:      return 0;
        -:  687:}
        -:  688:
    #####:  689:int outpostCard(struct gameState *state, int handPos, int currentPlayer)
        -:  690:{
        -:  691:          //set outpost flag
    #####:  692:      state->outpostPlayed--;
        -:  693:
        -:  694:      //discard card
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
    #####:  696:      return 0;
        -:  697:}
        -:  698:
      900:  699:int seaHagCard(struct gameState *state, int currentPlayer, int i)
        -:  700:{
     3096:  701:            for (i = 0; i < state->numPlayers; i++){
     2196:  702:	if (i != currentPlayer){
     1299:  703:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
     1299:  704:	  state->discardCount[i]++;
     1299:  705:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  706:	}
        -:  707:      }
      900:  708:      return 0;
        -:  709:}
        -:  710:
    #####:  711:int salvagerCard(struct gameState *state, int choice1, int currentPlayer, int handPos)
        -:  712:{
        -:  713:          //+1 buy
    #####:  714:      state->numBuys++;
        -:  715:
    #####:  716:      if (choice1)
        -:  717:	{
        -:  718:	  //gain coins equal to trashed card
    #####:  719:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  720:	  //trash card
    #####:  721:	  discardCard(choice1, currentPlayer, state, 1);
        -:  722:	}
        -:  723:
        -:  724:      //discard card
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
        -:  726:
    #####:  727:      return 0;
        -:  728:}
        -:  729:
     2000:  730:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  731:{
        -:  732:  int i;
        -:  733:  int j;
        -:  734:  int k;
        -:  735:  int x;
        -:  736:  int index;
     2000:  737:  int currentPlayer = whoseTurn(state);
     2000:  738:  int nextPlayer = currentPlayer + 1;
        -:  739:
     2000:  740:  int tributeRevealedCards[2] = {-1, -1};
        -:  741:  int temphand[MAX_HAND];// moved above the if statement
     2000:  742:  int drawntreasure=0;
        -:  743:  int cardDrawn;
     2000:  744:  int z = 0;// this is the counter for the temp hand
     2000:  745:  if (nextPlayer > (state->numPlayers - 1)){
        6:  746:    nextPlayer = 0;
        -:  747:  }
        -:  748:
        -:  749:
        -:  750:  //uses switch to select card and perform actions
     2000:  751:  switch( card )
        -:  752:    {
        -:  753:    case adventurer:
        -:  754:
      200:  755:        return adventurerCard(drawntreasure,state,currentPlayer,0,cardDrawn,temphand);
        -:  756:
        -:  757:      //return adventurerCard(drawntreasure,state,currentPlayer,z,cardDrawn,temphand);
        -:  758:    case council_room:
        -:  759:      //+4 Cards
    #####:  760:      for (i = 0; i < 4; i++)
        -:  761:	{
    #####:  762:	  drawCard(currentPlayer, state);
        -:  763:	}
        -:  764:
        -:  765:      //+1 Buy
    #####:  766:      state->numBuys++;
        -:  767:
        -:  768:      //Each other player draws a card
    #####:  769:      for (i = 0; i < state->numPlayers; i++)
        -:  770:	{
    #####:  771:	  if ( i != currentPlayer )
        -:  772:	    {
    #####:  773:	      drawCard(i, state);
        -:  774:	    }
        -:  775:	}
        -:  776:
        -:  777:      //put played card in played card pile
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
    #####:  780:      return 0;
        -:  781:
        -:  782:    case feast:
        -:  783:      //gain card with cost up to 5
        -:  784:      //Backup hand
    #####:  785:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  786:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  787:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  788:      }
        -:  789:      //Backup hand
        -:  790:
        -:  791:      //Update Coins for Buy
    #####:  792:      updateCoins(currentPlayer, state, 5);
    #####:  793:      x = 1;//Condition to loop on
    #####:  794:      while( x == 1) {//Buy one card
    #####:  795:	if (supplyCount(choice1, state) <= 0){
        -:  796:	  if (DEBUG)
        -:  797:	    printf("None of that card left, sorry!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  801:	  }
        -:  802:	}
    #####:  803:	else if (state->coins < getCost(choice1)){
    #####:  804:	  printf("That card is too expensive!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  808:	  }
        -:  809:	}
        -:  810:	else{
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
    #####:  816:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  817:	  x = 0;//No more buying cards
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
        -:  823:	}
        -:  824:      }
        -:  825:
        -:  826:      //Reset Hand
    #####:  827:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  828:	state->hand[currentPlayer][i] = temphand[i];
    #####:  829:	temphand[i] = -1;
        -:  830:      }
        -:  831:      //Reset Hand
        -:  832:
    #####:  833:      return 0;
        -:  834:
        -:  835:    case gardens:
    #####:  836:      return -1;
        -:  837:
        -:  838:    case mine:
    #####:  839:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  840:
    #####:  841:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      if (choice2 > treasure_map || choice2 < curse)
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:
    #####:  851:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  852:	{
    #####:  853:	  return -1;
        -:  854:	}
        -:  855:
    #####:  856:      gainCard(choice2, state, 2, currentPlayer);
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:
        -:  861:      //discard trashed card
    #####:  862:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  863:	{
    #####:  864:	  if (state->hand[currentPlayer][i] == j)
        -:  865:	    {
    #####:  866:	      discardCard(i, currentPlayer, state, 0);
    #####:  867:	      break;
        -:  868:	    }
        -:  869:	}
        -:  870:
    #####:  871:      return 0;
        -:  872:
        -:  873:    case remodel:
    #####:  874:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      gainCard(choice2, state, 0, currentPlayer);
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:	{
    #####:  889:	  if (state->hand[currentPlayer][i] == j)
        -:  890:	    {
    #####:  891:	      discardCard(i, currentPlayer, state, 0);
    #####:  892:	      break;
        -:  893:	    }
        -:  894:	}
        -:  895:
        -:  896:
    #####:  897:      return 0;
        -:  898:
        -:  899:    case smithy:
        -:  900:
      900:  901:      return smithyCard(i, currentPlayer, state, handPos);
        -:  902:
        -:  903:    case village:
        -:  904:      //+1 Card
    #####:  905:      drawCard(currentPlayer, state);
        -:  906:
        -:  907:      //+2 Actions
    #####:  908:      state->numActions = state->numActions + 2;
        -:  909:
        -:  910:      //discard played card from hand
    #####:  911:      discardCard(handPos, currentPlayer, state, 0);
    #####:  912:      return 0;
        -:  913:
        -:  914:    case baron:
    #####:  915:      state->numBuys++;//Increase buys by 1!
    #####:  916:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  917:	int p = 0;//Iterator for hand!
    #####:  918:	int card_not_discarded = 1;//Flag for discard set!
    #####:  919:	while(card_not_discarded){
    #####:  920:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  921:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  922:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  923:	    state->discardCount[currentPlayer]++;
    #####:  924:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  925:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  926:	    }
    #####:  927:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  928:	    state->handCount[currentPlayer]--;
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
    #####:  931:	  else if (p > state->handCount[currentPlayer]){
        -:  932:	    if(DEBUG) {
        -:  933:	      printf("No estate cards in your hand, invalid choice\n");
        -:  934:	      printf("Must gain an estate if there are any\n");
        -:  935:	    }
    #####:  936:	    if (supplyCount(estate, state) > 0){
    #####:  937:	      gainCard(estate, state, 0, currentPlayer);
    #####:  938:	      state->supplyCount[estate]--;//Decrement estates
    #####:  939:	      if (supplyCount(estate, state) == 0){
    #####:  940:		isGameOver(state);
        -:  941:	      }
        -:  942:	    }
    #####:  943:	    card_not_discarded = 0;//Exit the loop
        -:  944:	  }
        -:  945:
        -:  946:	  else{
    #####:  947:	    p++;//Next card
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:
        -:  952:      else{
    #####:  953:	if (supplyCount(estate, state) > 0){
    #####:  954:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  955:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  956:	  if (supplyCount(estate, state) == 0){
    #####:  957:	    isGameOver(state);
        -:  958:	  }
        -:  959:	}
        -:  960:      }
        -:  961:
        -:  962:
    #####:  963:      return 0;
        -:  964:
        -:  965:    case great_hall:
        -:  966:      //+1 Card
    #####:  967:      drawCard(currentPlayer, state);
        -:  968:
        -:  969:      //+1 Actions
    #####:  970:      state->numActions++;
        -:  971:
        -:  972:      //discard card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);
    #####:  974:      return 0;
        -:  975:
        -:  976:    case minion:
        -:  977:      //+1 action
    #####:  978:      state->numActions++;
        -:  979:
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
    #####:  983:      if (choice1)		//+2 coins
        -:  984:	{
    #####:  985:	  state->coins = state->coins + 2;
        -:  986:	}
        -:  987:
    #####:  988:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  989:	{
        -:  990:	  //discard hand
    #####:  991:	  while(numHandCards(state) > 0)
        -:  992:	    {
    #####:  993:	      discardCard(handPos, currentPlayer, state, 0);
        -:  994:	    }
        -:  995:
        -:  996:	  //draw 4
    #####:  997:	  for (i = 0; i < 4; i++)
        -:  998:	    {
    #####:  999:	      drawCard(currentPlayer, state);
        -: 1000:	    }
        -: 1001:
        -: 1002:	  //other players discard hand and redraw if hand size > 4
    #####: 1003:	  for (i = 0; i < state->numPlayers; i++)
        -: 1004:	    {
    #####: 1005:	      if (i != currentPlayer)
        -: 1006:		{
    #####: 1007:		  if ( state->handCount[i] > 4 )
        -: 1008:		    {
        -: 1009:		      //discard hand
    #####: 1010:		      while( state->handCount[i] > 0 )
        -: 1011:			{
    #####: 1012:			  discardCard(handPos, i, state, 0);
        -: 1013:			}
        -: 1014:
        -: 1015:		      //draw 4
    #####: 1016:		      for (j = 0; j < 4; j++)
        -: 1017:			{
    #####: 1018:			  drawCard(i, state);
        -: 1019:			}
        -: 1020:		    }
        -: 1021:		}
        -: 1022:	    }
        -: 1023:
        -: 1024:	}
    #####: 1025:      return 0;
        -: 1026:
        -: 1027:    case steward:
    #####: 1028:      if (choice1 == 1)
        -: 1029:	{
        -: 1030:	  //+2 cards
    #####: 1031:	  drawCard(currentPlayer, state);
    #####: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
    #####: 1034:      else if (choice1 == 2)
        -: 1035:	{
        -: 1036:	  //+2 coins
    #####: 1037:	  state->coins = state->coins + 2;
        -: 1038:	}
        -: 1039:      else
        -: 1040:	{
        -: 1041:	  //trash 2 cards in hand
    #####: 1042:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1043:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1044:	}
        -: 1045:
        -: 1046:      //discard card from hand
    #####: 1047:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1048:      return 0;
        -: 1049:
        -: 1050:    case tribute:
    #####: 1051:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1052:	if (state->deckCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	  state->deckCount[nextPlayer]--;
        -: 1055:	}
    #####: 1056:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1057:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1058:	  state->discardCount[nextPlayer]--;
        -: 1059:	}
        -: 1060:	else{
        -: 1061:	  //No Card to Reveal
        -: 1062:	  if (DEBUG){
        -: 1063:	    printf("No cards to reveal\n");
        -: 1064:	  }
        -: 1065:	}
        -: 1066:      }
        -: 1067:
        -: 1068:      else{
    #####: 1069:	if (state->deckCount[nextPlayer] == 0){
    #####: 1070:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1071:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1072:	    state->deckCount[nextPlayer]++;
    #####: 1073:	    state->discard[nextPlayer][i] = -1;
    #####: 1074:	    state->discardCount[nextPlayer]--;
        -: 1075:	  }
        -: 1076:
    #####: 1077:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1078:	}
    #####: 1079:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:	state->deckCount[nextPlayer]--;
    #####: 1082:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:	state->deckCount[nextPlayer]--;
        -: 1085:      }
        -: 1086:
    #####: 1087:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1088:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1089:	state->playedCardCount++;
    #####: 1090:	tributeRevealedCards[1] = -1;
        -: 1091:      }
        -: 1092:
    #####: 1093:      for (i = 0; i <= 2; i ++){
    #####: 1094:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1095:	  state->coins += 2;
        -: 1096:	}
        -: 1097:
    #####: 1098:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1099:	  drawCard(currentPlayer, state);
    #####: 1100:	  drawCard(currentPlayer, state);
        -: 1101:	}
        -: 1102:	else{//Action Card
    #####: 1103:	  state->numActions = state->numActions + 2;
        -: 1104:	}
        -: 1105:      }
        -: 1106:
    #####: 1107:      return 0;
        -: 1108:
        -: 1109:    case ambassador:
    #####: 1110:      j = 0;		//used to check if player has enough cards to discard
        -: 1111:
    #####: 1112:      if (choice2 > 2 || choice2 < 0)
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      if (choice1 == handPos)
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:
    #####: 1122:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:	{
    #####: 1124:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1125:	    {
    #####: 1126:	      j++;
        -: 1127:	    }
        -: 1128:	}
    #####: 1129:      if (j < choice2)
        -: 1130:	{
    #####: 1131:	  return -1;
        -: 1132:	}
        -: 1133:
        -: 1134:      if (DEBUG)
        -: 1135:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1136:
        -: 1137:      //increase supply count for choosen card by amount being discarded
    #####: 1138:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1139:
        -: 1140:      //each other player gains a copy of revealed card
    #####: 1141:      for (i = 0; i < state->numPlayers; i++)
        -: 1142:	{
    #####: 1143:	  if (i != currentPlayer)
        -: 1144:	    {
    #####: 1145:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1146:	    }
        -: 1147:	}
        -: 1148:
        -: 1149:      //discard played card from hand
    #####: 1150:      discardCard(handPos, currentPlayer, state, 0);
        -: 1151:
        -: 1152:      //trash copies of cards returned to supply
    #####: 1153:      for (j = 0; j < choice2; j++)
        -: 1154:	{
    #####: 1155:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1156:	    {
    #####: 1157:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1158:		{
    #####: 1159:		  discardCard(i, currentPlayer, state, 1);
    #####: 1160:		  break;
        -: 1161:		}
        -: 1162:	    }
        -: 1163:	}
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:    case cutpurse:
        -: 1168:
    #####: 1169:      updateCoins(currentPlayer, state, 2);
    #####: 1170:      for (i = 0; i < state->numPlayers; i++)
        -: 1171:	{
    #####: 1172:	  if (i != currentPlayer)
        -: 1173:	    {
    #####: 1174:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1175:		{
    #####: 1176:		  if (state->hand[i][j] == copper)
        -: 1177:		    {
    #####: 1178:		      discardCard(j, i, state, 0);
    #####: 1179:		      break;
        -: 1180:		    }
    #####: 1181:		  if (j == state->handCount[i])
        -: 1182:		    {
    #####: 1183:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1184:			{
        -: 1185:			  if (DEBUG)
        -: 1186:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1187:			}
    #####: 1188:		      break;
        -: 1189:		    }
        -: 1190:		}
        -: 1191:
        -: 1192:	    }
        -: 1193:
        -: 1194:	}
        -: 1195:
        -: 1196:      //discard played card from hand
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
        -: 1198:
    #####: 1199:      return 0;
        -: 1200:
        -: 1201:
        -: 1202:    case embargo:
        -: 1203:      //+2 Coins
    #####: 1204:      state->coins = state->coins + 2;
        -: 1205:
        -: 1206:      //see if selected pile is in play
    #####: 1207:      if ( state->supplyCount[choice1] == -1 )
        -: 1208:	{
    #####: 1209:	  return -1;
        -: 1210:	}
        -: 1211:
        -: 1212:      //add embargo token to selected supply pile
    #####: 1213:      state->embargoTokens[choice1]++;
        -: 1214:
        -: 1215:      //trash card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1217:      return 0;
        -: 1218:
        -: 1219:    case outpost:
        -: 1220:
    #####: 1221:      return outpostCard(state, handPos, currentPlayer);
        -: 1222:
        -: 1223:    case salvager:
        -: 1224:
    #####: 1225:      return salvagerCard(state, choice1, currentPlayer, i);
        -: 1226:
        -: 1227:    case sea_hag:
        -: 1228:
      900: 1229:      return seaHagCard(state, currentPlayer, i);
        -: 1230:
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
      900: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:
        -: 1268:  //if card is not trashed, added to Played pile
      900: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
      900: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      900: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:
        -: 1276:  //set played card to -1
      900: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:  //remove card from player's hand
      900: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
      900: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
      900: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
      900: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
      900: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:
      900: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
      984: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:
        -: 1344:  //reset coin count
      984: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
     5904: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
     4920: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
     3428: 1352:	  state->coins += 1;
        -: 1353:	}
     1492: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
     1492: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}
        -: 1362:    }
        -: 1363:
        -: 1364:  //add bonus
      984: 1365:  state->coins += bonus;
        -: 1366:
      984: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing Smithy!
Test Passed: 300, Test Failed: 0
File 'dominion.c'
Lines executed:28.67% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    54984:    8:int compare(const void* a, const void* b) {
    54984:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    54984:   11:  if (*(int*)a < *(int*)b)
    13104:   12:    return -1;
    41880:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2700:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     2700:   44:  SelectStream(1);
     2700:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     2700:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     1371:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1329:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    14619:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   146190:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   132900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1329:   73:  if (numPlayers == 2)
        -:   74:    {
      711:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      618:   77:  else if (numPlayers == 3)
        -:   78:    {
      618:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1329:   87:  if (numPlayers == 2)
        -:   88:    {
      711:   89:      state->supplyCount[estate] = 8;
      711:   90:      state->supplyCount[duchy] = 8;
      711:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      618:   95:      state->supplyCount[estate] = 12;
      618:   96:      state->supplyCount[duchy] = 12;
      618:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1329:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1329:  102:  state->supplyCount[silver] = 40;
     1329:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    27909:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   220509:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   207066:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13137:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2964:  115:		  if (numPlayers == 2){
      798:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
      684:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    11655:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13137:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   193929:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4605:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3276:  140:      state->deckCount[i] = 0;
    13104:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9828:  143:	  state->deck[i][j] = estate;
     9828:  144:	  state->deckCount[i]++;
        -:  145:	}
    26208:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22932:  148:	  state->deck[i][j] = copper;
    22932:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4605:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3276:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4605:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     3276:  166:      state->handCount[i] = 0;
     3276:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i,temphand state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    37212:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    35883:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1329:  182:  state->outpostPlayed = 0;
     1329:  183:  state->phase = 0;
     1329:  184:  state->numActions = 1;
     1329:  185:  state->numBuys = 1;
     1329:  186:  state->playedCardCount = 0;
     1329:  187:  state->whoseTurn = 0;
     1329:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7974:  192:  for (it = 0; it < 5; it++){
     6645:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1329:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1329:  198:  return 0;
        -:  199:}
        -:  200:
     3284:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3284:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3284:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     3284:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    40856:  214:  while (state->deckCount[player] > 0) {
    34288:  215:    card = floor(Random() * state->deckCount[player]);
    34288:  216:    newDeck[newDeckPos] = state->deck[player][card];
    34288:  217:    newDeckPos++;
   209109:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   174821:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    34288:  221:    state->deckCount[player]--;
        -:  222:  }
    37572:  223:  for (i = 0; i < newDeckPos; i++) {
    34288:  224:    state->deck[player][i] = newDeck[i];
    34288:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3284:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     5400:  346:int whoseTurn(struct gameState *state) {
     5400:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    87417:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    87417:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1536:  533:    for (i = 0; i < state->discardCount[player];i++){
     1528:  534:      state->deck[player][i] = state->discard[player][i];
     1528:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        8:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  563:    state->deckCount[player]--;
        8:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    87409:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    87409:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    87409:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    87409:  576:    state->deckCount[player]--;
    87409:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    87417:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      300:  646:int adventurerCard(int drawntreasure,
        -:  647:                   struct gameState *state,
        -:  648:                   int currentPlayer,
        -:  649:                   int z,
        -:  650:                   int cardDrawn,
        -:  651:                   int temphand[])
        -:  652:{
    77772:  653:    while(drawntreasure<2){
    77172:  654:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:	  shuffle(currentPlayer, state);
        -:  656:	}
    77172:  657:	drawCard(currentPlayer, state);
    77172:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    77172:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
      600:  660:          drawntreasure++;
        -:  661:          //printf("Drawn Treasure %d", drawntreasure);
        -:  662:	}else{
        -:  663:          //printf("z is %d\n",z);
    76572:  664:          temphand[z]=cardDrawn;
    76572:  665:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    76572:  666:          z++;
        -:  667:	}
        -:  668:      }
    77172:  669:      while(z-1>=0){
    76572:  670:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    76572:  671:        z=z-1;
        -:  672:      }
      300:  673:      return 0;
        -:  674:}
        -:  675:
     1200:  676:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  677:{
        -:  678:      //+3 Cards
     4800:  679:      for (i = 0; i < 3; i++)
        -:  680:	{
     3600:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:
        -:  684:      //discard card from hand
     1200:  685:      discardCard(handPos, currentPlayer, state, 0);
     1200:  686:      return 0;
        -:  687:}
        -:  688:
    #####:  689:int outpostCard(struct gameState *state, int handPos, int currentPlayer)
        -:  690:{
        -:  691:          //set outpost flag
    #####:  692:      state->outpostPlayed--;
        -:  693:
        -:  694:      //discard card
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
    #####:  696:      return 0;
        -:  697:}
        -:  698:
     1200:  699:int seaHagCard(struct gameState *state, int currentPlayer, int i)
        -:  700:{
     4128:  701:            for (i = 0; i < state->numPlayers; i++){
     2928:  702:	if (i != currentPlayer){
     1732:  703:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
     1732:  704:	  state->discardCount[i]++;
     1732:  705:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  706:	}
        -:  707:      }
     1200:  708:      return 0;
        -:  709:}
        -:  710:
    #####:  711:int salvagerCard(struct gameState *state, int choice1, int currentPlayer, int handPos)
        -:  712:{
        -:  713:          //+1 buy
    #####:  714:      state->numBuys++;
        -:  715:
    #####:  716:      if (choice1)
        -:  717:	{
        -:  718:	  //gain coins equal to trashed card
    #####:  719:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  720:	  //trash card
    #####:  721:	  discardCard(choice1, currentPlayer, state, 1);
        -:  722:	}
        -:  723:
        -:  724:      //discard card
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
        -:  726:
    #####:  727:      return 0;
        -:  728:}
        -:  729:
     2700:  730:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  731:{
        -:  732:  int i;
        -:  733:  int j;
        -:  734:  int k;
        -:  735:  int x;
        -:  736:  int index;
     2700:  737:  int currentPlayer = whoseTurn(state);
     2700:  738:  int nextPlayer = currentPlayer + 1;
        -:  739:
     2700:  740:  int tributeRevealedCards[2] = {-1, -1};
        -:  741:  int temphand[MAX_HAND];// moved above the if statement
     2700:  742:  int drawntreasure=0;
        -:  743:  int cardDrawn;
     2700:  744:  int z = 0;// this is the counter for the temp hand
     2700:  745:  if (nextPlayer > (state->numPlayers - 1)){
        8:  746:    nextPlayer = 0;
        -:  747:  }
        -:  748:
        -:  749:
        -:  750:  //uses switch to select card and perform actions
     2700:  751:  switch( card )
        -:  752:    {
        -:  753:    case adventurer:
        -:  754:
      300:  755:        return adventurerCard(drawntreasure,state,currentPlayer,0,cardDrawn,temphand);
        -:  756:
        -:  757:      //return adventurerCard(drawntreasure,state,currentPlayer,z,cardDrawn,temphand);
        -:  758:    case council_room:
        -:  759:      //+4 Cards
    #####:  760:      for (i = 0; i < 4; i++)
        -:  761:	{
    #####:  762:	  drawCard(currentPlayer, state);
        -:  763:	}
        -:  764:
        -:  765:      //+1 Buy
    #####:  766:      state->numBuys++;
        -:  767:
        -:  768:      //Each other player draws a card
    #####:  769:      for (i = 0; i < state->numPlayers; i++)
        -:  770:	{
    #####:  771:	  if ( i != currentPlayer )
        -:  772:	    {
    #####:  773:	      drawCard(i, state);
        -:  774:	    }
        -:  775:	}
        -:  776:
        -:  777:      //put played card in played card pile
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
    #####:  780:      return 0;
        -:  781:
        -:  782:    case feast:
        -:  783:      //gain card with cost up to 5
        -:  784:      //Backup hand
    #####:  785:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  786:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  787:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  788:      }
        -:  789:      //Backup hand
        -:  790:
        -:  791:      //Update Coins for Buy
    #####:  792:      updateCoins(currentPlayer, state, 5);
    #####:  793:      x = 1;//Condition to loop on
    #####:  794:      while( x == 1) {//Buy one card
    #####:  795:	if (supplyCount(choice1, state) <= 0){
        -:  796:	  if (DEBUG)
        -:  797:	    printf("None of that card left, sorry!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  801:	  }
        -:  802:	}
    #####:  803:	else if (state->coins < getCost(choice1)){
    #####:  804:	  printf("That card is too expensive!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  808:	  }
        -:  809:	}
        -:  810:	else{
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
    #####:  816:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  817:	  x = 0;//No more buying cards
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
        -:  823:	}
        -:  824:      }
        -:  825:
        -:  826:      //Reset Hand
    #####:  827:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  828:	state->hand[currentPlayer][i] = temphand[i];
    #####:  829:	temphand[i] = -1;
        -:  830:      }
        -:  831:      //Reset Hand
        -:  832:
    #####:  833:      return 0;
        -:  834:
        -:  835:    case gardens:
    #####:  836:      return -1;
        -:  837:
        -:  838:    case mine:
    #####:  839:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  840:
    #####:  841:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      if (choice2 > treasure_map || choice2 < curse)
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:
    #####:  851:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  852:	{
    #####:  853:	  return -1;
        -:  854:	}
        -:  855:
    #####:  856:      gainCard(choice2, state, 2, currentPlayer);
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:
        -:  861:      //discard trashed card
    #####:  862:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  863:	{
    #####:  864:	  if (state->hand[currentPlayer][i] == j)
        -:  865:	    {
    #####:  866:	      discardCard(i, currentPlayer, state, 0);
    #####:  867:	      break;
        -:  868:	    }
        -:  869:	}
        -:  870:
    #####:  871:      return 0;
        -:  872:
        -:  873:    case remodel:
    #####:  874:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      gainCard(choice2, state, 0, currentPlayer);
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:	{
    #####:  889:	  if (state->hand[currentPlayer][i] == j)
        -:  890:	    {
    #####:  891:	      discardCard(i, currentPlayer, state, 0);
    #####:  892:	      break;
        -:  893:	    }
        -:  894:	}
        -:  895:
        -:  896:
    #####:  897:      return 0;
        -:  898:
        -:  899:    case smithy:
        -:  900:
     1200:  901:      return smithyCard(i, currentPlayer, state, handPos);
        -:  902:
        -:  903:    case village:
        -:  904:      //+1 Card
    #####:  905:      drawCard(currentPlayer, state);
        -:  906:
        -:  907:      //+2 Actions
    #####:  908:      state->numActions = state->numActions + 2;
        -:  909:
        -:  910:      //discard played card from hand
    #####:  911:      discardCard(handPos, currentPlayer, state, 0);
    #####:  912:      return 0;
        -:  913:
        -:  914:    case baron:
    #####:  915:      state->numBuys++;//Increase buys by 1!
    #####:  916:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  917:	int p = 0;//Iterator for hand!
    #####:  918:	int card_not_discarded = 1;//Flag for discard set!
    #####:  919:	while(card_not_discarded){
    #####:  920:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  921:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  922:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  923:	    state->discardCount[currentPlayer]++;
    #####:  924:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  925:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  926:	    }
    #####:  927:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  928:	    state->handCount[currentPlayer]--;
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
    #####:  931:	  else if (p > state->handCount[currentPlayer]){
        -:  932:	    if(DEBUG) {
        -:  933:	      printf("No estate cards in your hand, invalid choice\n");
        -:  934:	      printf("Must gain an estate if there are any\n");
        -:  935:	    }
    #####:  936:	    if (supplyCount(estate, state) > 0){
    #####:  937:	      gainCard(estate, state, 0, currentPlayer);
    #####:  938:	      state->supplyCount[estate]--;//Decrement estates
    #####:  939:	      if (supplyCount(estate, state) == 0){
    #####:  940:		isGameOver(state);
        -:  941:	      }
        -:  942:	    }
    #####:  943:	    card_not_discarded = 0;//Exit the loop
        -:  944:	  }
        -:  945:
        -:  946:	  else{
    #####:  947:	    p++;//Next card
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:
        -:  952:      else{
    #####:  953:	if (supplyCount(estate, state) > 0){
    #####:  954:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  955:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  956:	  if (supplyCount(estate, state) == 0){
    #####:  957:	    isGameOver(state);
        -:  958:	  }
        -:  959:	}
        -:  960:      }
        -:  961:
        -:  962:
    #####:  963:      return 0;
        -:  964:
        -:  965:    case great_hall:
        -:  966:      //+1 Card
    #####:  967:      drawCard(currentPlayer, state);
        -:  968:
        -:  969:      //+1 Actions
    #####:  970:      state->numActions++;
        -:  971:
        -:  972:      //discard card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);
    #####:  974:      return 0;
        -:  975:
        -:  976:    case minion:
        -:  977:      //+1 action
    #####:  978:      state->numActions++;
        -:  979:
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
    #####:  983:      if (choice1)		//+2 coins
        -:  984:	{
    #####:  985:	  state->coins = state->coins + 2;
        -:  986:	}
        -:  987:
    #####:  988:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  989:	{
        -:  990:	  //discard hand
    #####:  991:	  while(numHandCards(state) > 0)
        -:  992:	    {
    #####:  993:	      discardCard(handPos, currentPlayer, state, 0);
        -:  994:	    }
        -:  995:
        -:  996:	  //draw 4
    #####:  997:	  for (i = 0; i < 4; i++)
        -:  998:	    {
    #####:  999:	      drawCard(currentPlayer, state);
        -: 1000:	    }
        -: 1001:
        -: 1002:	  //other players discard hand and redraw if hand size > 4
    #####: 1003:	  for (i = 0; i < state->numPlayers; i++)
        -: 1004:	    {
    #####: 1005:	      if (i != currentPlayer)
        -: 1006:		{
    #####: 1007:		  if ( state->handCount[i] > 4 )
        -: 1008:		    {
        -: 1009:		      //discard hand
    #####: 1010:		      while( state->handCount[i] > 0 )
        -: 1011:			{
    #####: 1012:			  discardCard(handPos, i, state, 0);
        -: 1013:			}
        -: 1014:
        -: 1015:		      //draw 4
    #####: 1016:		      for (j = 0; j < 4; j++)
        -: 1017:			{
    #####: 1018:			  drawCard(i, state);
        -: 1019:			}
        -: 1020:		    }
        -: 1021:		}
        -: 1022:	    }
        -: 1023:
        -: 1024:	}
    #####: 1025:      return 0;
        -: 1026:
        -: 1027:    case steward:
    #####: 1028:      if (choice1 == 1)
        -: 1029:	{
        -: 1030:	  //+2 cards
    #####: 1031:	  drawCard(currentPlayer, state);
    #####: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
    #####: 1034:      else if (choice1 == 2)
        -: 1035:	{
        -: 1036:	  //+2 coins
    #####: 1037:	  state->coins = state->coins + 2;
        -: 1038:	}
        -: 1039:      else
        -: 1040:	{
        -: 1041:	  //trash 2 cards in hand
    #####: 1042:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1043:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1044:	}
        -: 1045:
        -: 1046:      //discard card from hand
    #####: 1047:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1048:      return 0;
        -: 1049:
        -: 1050:    case tribute:
    #####: 1051:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1052:	if (state->deckCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	  state->deckCount[nextPlayer]--;
        -: 1055:	}
    #####: 1056:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1057:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1058:	  state->discardCount[nextPlayer]--;
        -: 1059:	}
        -: 1060:	else{
        -: 1061:	  //No Card to Reveal
        -: 1062:	  if (DEBUG){
        -: 1063:	    printf("No cards to reveal\n");
        -: 1064:	  }
        -: 1065:	}
        -: 1066:      }
        -: 1067:
        -: 1068:      else{
    #####: 1069:	if (state->deckCount[nextPlayer] == 0){
    #####: 1070:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1071:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1072:	    state->deckCount[nextPlayer]++;
    #####: 1073:	    state->discard[nextPlayer][i] = -1;
    #####: 1074:	    state->discardCount[nextPlayer]--;
        -: 1075:	  }
        -: 1076:
    #####: 1077:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1078:	}
    #####: 1079:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:	state->deckCount[nextPlayer]--;
    #####: 1082:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:	state->deckCount[nextPlayer]--;
        -: 1085:      }
        -: 1086:
    #####: 1087:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1088:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1089:	state->playedCardCount++;
    #####: 1090:	tributeRevealedCards[1] = -1;
        -: 1091:      }
        -: 1092:
    #####: 1093:      for (i = 0; i <= 2; i ++){
    #####: 1094:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1095:	  state->coins += 2;
        -: 1096:	}
        -: 1097:
    #####: 1098:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1099:	  drawCard(currentPlayer, state);
    #####: 1100:	  drawCard(currentPlayer, state);
        -: 1101:	}
        -: 1102:	else{//Action Card
    #####: 1103:	  state->numActions = state->numActions + 2;
        -: 1104:	}
        -: 1105:      }
        -: 1106:
    #####: 1107:      return 0;
        -: 1108:
        -: 1109:    case ambassador:
    #####: 1110:      j = 0;		//used to check if player has enough cards to discard
        -: 1111:
    #####: 1112:      if (choice2 > 2 || choice2 < 0)
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      if (choice1 == handPos)
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:
    #####: 1122:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:	{
    #####: 1124:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1125:	    {
    #####: 1126:	      j++;
        -: 1127:	    }
        -: 1128:	}
    #####: 1129:      if (j < choice2)
        -: 1130:	{
    #####: 1131:	  return -1;
        -: 1132:	}
        -: 1133:
        -: 1134:      if (DEBUG)
        -: 1135:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1136:
        -: 1137:      //increase supply count for choosen card by amount being discarded
    #####: 1138:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1139:
        -: 1140:      //each other player gains a copy of revealed card
    #####: 1141:      for (i = 0; i < state->numPlayers; i++)
        -: 1142:	{
    #####: 1143:	  if (i != currentPlayer)
        -: 1144:	    {
    #####: 1145:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1146:	    }
        -: 1147:	}
        -: 1148:
        -: 1149:      //discard played card from hand
    #####: 1150:      discardCard(handPos, currentPlayer, state, 0);
        -: 1151:
        -: 1152:      //trash copies of cards returned to supply
    #####: 1153:      for (j = 0; j < choice2; j++)
        -: 1154:	{
    #####: 1155:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1156:	    {
    #####: 1157:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1158:		{
    #####: 1159:		  discardCard(i, currentPlayer, state, 1);
    #####: 1160:		  break;
        -: 1161:		}
        -: 1162:	    }
        -: 1163:	}
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:    case cutpurse:
        -: 1168:
    #####: 1169:      updateCoins(currentPlayer, state, 2);
    #####: 1170:      for (i = 0; i < state->numPlayers; i++)
        -: 1171:	{
    #####: 1172:	  if (i != currentPlayer)
        -: 1173:	    {
    #####: 1174:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1175:		{
    #####: 1176:		  if (state->hand[i][j] == copper)
        -: 1177:		    {
    #####: 1178:		      discardCard(j, i, state, 0);
    #####: 1179:		      break;
        -: 1180:		    }
    #####: 1181:		  if (j == state->handCount[i])
        -: 1182:		    {
    #####: 1183:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1184:			{
        -: 1185:			  if (DEBUG)
        -: 1186:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1187:			}
    #####: 1188:		      break;
        -: 1189:		    }
        -: 1190:		}
        -: 1191:
        -: 1192:	    }
        -: 1193:
        -: 1194:	}
        -: 1195:
        -: 1196:      //discard played card from hand
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
        -: 1198:
    #####: 1199:      return 0;
        -: 1200:
        -: 1201:
        -: 1202:    case embargo:
        -: 1203:      //+2 Coins
    #####: 1204:      state->coins = state->coins + 2;
        -: 1205:
        -: 1206:      //see if selected pile is in play
    #####: 1207:      if ( state->supplyCount[choice1] == -1 )
        -: 1208:	{
    #####: 1209:	  return -1;
        -: 1210:	}
        -: 1211:
        -: 1212:      //add embargo token to selected supply pile
    #####: 1213:      state->embargoTokens[choice1]++;
        -: 1214:
        -: 1215:      //trash card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1217:      return 0;
        -: 1218:
        -: 1219:    case outpost:
        -: 1220:
    #####: 1221:      return outpostCard(state, handPos, currentPlayer);
        -: 1222:
        -: 1223:    case salvager:
        -: 1224:
    #####: 1225:      return salvagerCard(state, choice1, currentPlayer, i);
        -: 1226:
        -: 1227:    case sea_hag:
        -: 1228:
     1200: 1229:      return seaHagCard(state, currentPlayer, i);
        -: 1230:
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
     1200: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:
        -: 1268:  //if card is not trashed, added to Played pile
     1200: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
     1200: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1200: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:
        -: 1276:  //set played card to -1
     1200: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:  //remove card from player's hand
     1200: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
     1200: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
     1200: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
     1200: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
     1200: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:
     1200: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
     1329: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:
        -: 1344:  //reset coin count
     1329: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
     7974: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
     6645: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
     4629: 1352:	  state->coins += 1;
        -: 1353:	}
     2016: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
     2016: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}
        -: 1362:    }
        -: 1363:
        -: 1364:  //add bonus
     1329: 1365:  state->coins += bonus;
        -: 1366:
     1329: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing Smithy!
Test Passed: 300, Test Failed: 0
File 'dominion.c'
Lines executed:28.67% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:14
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    69195:    8:int compare(const void* a, const void* b) {
    69195:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    69195:   11:  if (*(int*)a < *(int*)b)
    16504:   12:    return -1;
    52691:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     3400:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     3400:   44:  SelectStream(1);
     3400:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     3400:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     1726:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1674:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    18414:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   184140:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   167400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1674:   73:  if (numPlayers == 2)
        -:   74:    {
      896:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      778:   77:  else if (numPlayers == 3)
        -:   78:    {
      778:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1674:   87:  if (numPlayers == 2)
        -:   88:    {
      896:   89:      state->supplyCount[estate] = 8;
      896:   90:      state->supplyCount[duchy] = 8;
      896:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      778:   95:      state->supplyCount[estate] = 12;
      778:   96:      state->supplyCount[duchy] = 12;
      778:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1674:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1674:  102:  state->supplyCount[silver] = 40;
     1674:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    35154:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   277842:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   260898:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    16536:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     3756:  115:		  if (numPlayers == 2){
     1012:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
      866:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    14658:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    16536:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   244362:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     5800:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     4126:  140:      state->deckCount[i] = 0;
    16504:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    12378:  143:	  state->deck[i][j] = estate;
    12378:  144:	  state->deckCount[i]++;
        -:  145:	}
    33008:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    28882:  148:	  state->deck[i][j] = copper;
    28882:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     5800:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     4126:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     5800:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     4126:  166:      state->handCount[i] = 0;
     4126:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i,temphand state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    46872:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    45198:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1674:  182:  state->outpostPlayed = 0;
     1674:  183:  state->phase = 0;
     1674:  184:  state->numActions = 1;
     1674:  185:  state->numBuys = 1;
     1674:  186:  state->playedCardCount = 0;
     1674:  187:  state->whoseTurn = 0;
     1674:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    10044:  192:  for (it = 0; it < 5; it++){
     8370:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1674:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1674:  198:  return 0;
        -:  199:}
        -:  200:
     4136:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     4136:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     4136:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     4136:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    51442:  214:  while (state->deckCount[player] > 0) {
    43170:  215:    card = floor(Random() * state->deckCount[player]);
    43170:  216:    newDeck[newDeckPos] = state->deck[player][card];
    43170:  217:    newDeckPos++;
   262396:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   219226:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    43170:  221:    state->deckCount[player]--;
        -:  222:  }
    47306:  223:  for (i = 0; i < newDeckPos; i++) {
    43170:  224:    state->deck[player][i] = newDeck[i];
    43170:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4136:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     6800:  346:int whoseTurn(struct gameState *state) {
     6800:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   115766:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   115766:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1920:  533:    for (i = 0; i < state->discardCount[player];i++){
     1910:  534:      state->deck[player][i] = state->discard[player][i];
     1910:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       10:  538:    state->deckCount[player] = state->discardCount[player];
       10:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       10:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       10:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       10:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       10:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       10:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       10:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  563:    state->deckCount[player]--;
       10:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   115756:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   115756:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   115756:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   115756:  576:    state->deckCount[player]--;
   115756:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   115766:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      400:  646:int adventurerCard(int drawntreasure,
        -:  647:                   struct gameState *state,
        -:  648:                   int currentPlayer,
        -:  649:                   int z,
        -:  650:                   int cardDrawn,
        -:  651:                   int temphand[])
        -:  652:{
   103696:  653:    while(drawntreasure<2){
   102896:  654:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:	  shuffle(currentPlayer, state);
        -:  656:	}
   102896:  657:	drawCard(currentPlayer, state);
   102896:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   102896:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
      800:  660:          drawntreasure++;
        -:  661:          //printf("Drawn Treasure %d", drawntreasure);
        -:  662:	}else{
        -:  663:          //printf("z is %d\n",z);
   102096:  664:          temphand[z]=cardDrawn;
   102096:  665:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   102096:  666:          z++;
        -:  667:	}
        -:  668:      }
   102896:  669:      while(z-1>=0){
   102096:  670:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   102096:  671:        z=z-1;
        -:  672:      }
      400:  673:      return 0;
        -:  674:}
        -:  675:
     1500:  676:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  677:{
        -:  678:      //+3 Cards
     6000:  679:      for (i = 0; i < 3; i++)
        -:  680:	{
     4500:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:
        -:  684:      //discard card from hand
     1500:  685:      discardCard(handPos, currentPlayer, state, 0);
     1500:  686:      return 0;
        -:  687:}
        -:  688:
    #####:  689:int outpostCard(struct gameState *state, int handPos, int currentPlayer)
        -:  690:{
        -:  691:          //set outpost flag
    #####:  692:      state->outpostPlayed--;
        -:  693:
        -:  694:      //discard card
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
    #####:  696:      return 0;
        -:  697:}
        -:  698:
     1500:  699:int seaHagCard(struct gameState *state, int currentPlayer, int i)
        -:  700:{
     5160:  701:            for (i = 0; i < state->numPlayers; i++){
     3660:  702:	if (i != currentPlayer){
     2165:  703:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
     2165:  704:	  state->discardCount[i]++;
     2165:  705:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  706:	}
        -:  707:      }
     1500:  708:      return 0;
        -:  709:}
        -:  710:
    #####:  711:int salvagerCard(struct gameState *state, int choice1, int currentPlayer, int handPos)
        -:  712:{
        -:  713:          //+1 buy
    #####:  714:      state->numBuys++;
        -:  715:
    #####:  716:      if (choice1)
        -:  717:	{
        -:  718:	  //gain coins equal to trashed card
    #####:  719:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  720:	  //trash card
    #####:  721:	  discardCard(choice1, currentPlayer, state, 1);
        -:  722:	}
        -:  723:
        -:  724:      //discard card
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
        -:  726:
    #####:  727:      return 0;
        -:  728:}
        -:  729:
     3400:  730:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  731:{
        -:  732:  int i;
        -:  733:  int j;
        -:  734:  int k;
        -:  735:  int x;
        -:  736:  int index;
     3400:  737:  int currentPlayer = whoseTurn(state);
     3400:  738:  int nextPlayer = currentPlayer + 1;
        -:  739:
     3400:  740:  int tributeRevealedCards[2] = {-1, -1};
        -:  741:  int temphand[MAX_HAND];// moved above the if statement
     3400:  742:  int drawntreasure=0;
        -:  743:  int cardDrawn;
     3400:  744:  int z = 0;// this is the counter for the temp hand
     3400:  745:  if (nextPlayer > (state->numPlayers - 1)){
       10:  746:    nextPlayer = 0;
        -:  747:  }
        -:  748:
        -:  749:
        -:  750:  //uses switch to select card and perform actions
     3400:  751:  switch( card )
        -:  752:    {
        -:  753:    case adventurer:
        -:  754:
      400:  755:        return adventurerCard(drawntreasure,state,currentPlayer,0,cardDrawn,temphand);
        -:  756:
        -:  757:      //return adventurerCard(drawntreasure,state,currentPlayer,z,cardDrawn,temphand);
        -:  758:    case council_room:
        -:  759:      //+4 Cards
    #####:  760:      for (i = 0; i < 4; i++)
        -:  761:	{
    #####:  762:	  drawCard(currentPlayer, state);
        -:  763:	}
        -:  764:
        -:  765:      //+1 Buy
    #####:  766:      state->numBuys++;
        -:  767:
        -:  768:      //Each other player draws a card
    #####:  769:      for (i = 0; i < state->numPlayers; i++)
        -:  770:	{
    #####:  771:	  if ( i != currentPlayer )
        -:  772:	    {
    #####:  773:	      drawCard(i, state);
        -:  774:	    }
        -:  775:	}
        -:  776:
        -:  777:      //put played card in played card pile
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
    #####:  780:      return 0;
        -:  781:
        -:  782:    case feast:
        -:  783:      //gain card with cost up to 5
        -:  784:      //Backup hand
    #####:  785:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  786:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  787:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  788:      }
        -:  789:      //Backup hand
        -:  790:
        -:  791:      //Update Coins for Buy
    #####:  792:      updateCoins(currentPlayer, state, 5);
    #####:  793:      x = 1;//Condition to loop on
    #####:  794:      while( x == 1) {//Buy one card
    #####:  795:	if (supplyCount(choice1, state) <= 0){
        -:  796:	  if (DEBUG)
        -:  797:	    printf("None of that card left, sorry!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  801:	  }
        -:  802:	}
    #####:  803:	else if (state->coins < getCost(choice1)){
    #####:  804:	  printf("That card is too expensive!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  808:	  }
        -:  809:	}
        -:  810:	else{
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
    #####:  816:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  817:	  x = 0;//No more buying cards
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
        -:  823:	}
        -:  824:      }
        -:  825:
        -:  826:      //Reset Hand
    #####:  827:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  828:	state->hand[currentPlayer][i] = temphand[i];
    #####:  829:	temphand[i] = -1;
        -:  830:      }
        -:  831:      //Reset Hand
        -:  832:
    #####:  833:      return 0;
        -:  834:
        -:  835:    case gardens:
    #####:  836:      return -1;
        -:  837:
        -:  838:    case mine:
    #####:  839:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  840:
    #####:  841:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      if (choice2 > treasure_map || choice2 < curse)
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:
    #####:  851:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  852:	{
    #####:  853:	  return -1;
        -:  854:	}
        -:  855:
    #####:  856:      gainCard(choice2, state, 2, currentPlayer);
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:
        -:  861:      //discard trashed card
    #####:  862:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  863:	{
    #####:  864:	  if (state->hand[currentPlayer][i] == j)
        -:  865:	    {
    #####:  866:	      discardCard(i, currentPlayer, state, 0);
    #####:  867:	      break;
        -:  868:	    }
        -:  869:	}
        -:  870:
    #####:  871:      return 0;
        -:  872:
        -:  873:    case remodel:
    #####:  874:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      gainCard(choice2, state, 0, currentPlayer);
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:	{
    #####:  889:	  if (state->hand[currentPlayer][i] == j)
        -:  890:	    {
    #####:  891:	      discardCard(i, currentPlayer, state, 0);
    #####:  892:	      break;
        -:  893:	    }
        -:  894:	}
        -:  895:
        -:  896:
    #####:  897:      return 0;
        -:  898:
        -:  899:    case smithy:
        -:  900:
     1500:  901:      return smithyCard(i, currentPlayer, state, handPos);
        -:  902:
        -:  903:    case village:
        -:  904:      //+1 Card
    #####:  905:      drawCard(currentPlayer, state);
        -:  906:
        -:  907:      //+2 Actions
    #####:  908:      state->numActions = state->numActions + 2;
        -:  909:
        -:  910:      //discard played card from hand
    #####:  911:      discardCard(handPos, currentPlayer, state, 0);
    #####:  912:      return 0;
        -:  913:
        -:  914:    case baron:
    #####:  915:      state->numBuys++;//Increase buys by 1!
    #####:  916:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  917:	int p = 0;//Iterator for hand!
    #####:  918:	int card_not_discarded = 1;//Flag for discard set!
    #####:  919:	while(card_not_discarded){
    #####:  920:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  921:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  922:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  923:	    state->discardCount[currentPlayer]++;
    #####:  924:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  925:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  926:	    }
    #####:  927:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  928:	    state->handCount[currentPlayer]--;
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
    #####:  931:	  else if (p > state->handCount[currentPlayer]){
        -:  932:	    if(DEBUG) {
        -:  933:	      printf("No estate cards in your hand, invalid choice\n");
        -:  934:	      printf("Must gain an estate if there are any\n");
        -:  935:	    }
    #####:  936:	    if (supplyCount(estate, state) > 0){
    #####:  937:	      gainCard(estate, state, 0, currentPlayer);
    #####:  938:	      state->supplyCount[estate]--;//Decrement estates
    #####:  939:	      if (supplyCount(estate, state) == 0){
    #####:  940:		isGameOver(state);
        -:  941:	      }
        -:  942:	    }
    #####:  943:	    card_not_discarded = 0;//Exit the loop
        -:  944:	  }
        -:  945:
        -:  946:	  else{
    #####:  947:	    p++;//Next card
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:
        -:  952:      else{
    #####:  953:	if (supplyCount(estate, state) > 0){
    #####:  954:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  955:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  956:	  if (supplyCount(estate, state) == 0){
    #####:  957:	    isGameOver(state);
        -:  958:	  }
        -:  959:	}
        -:  960:      }
        -:  961:
        -:  962:
    #####:  963:      return 0;
        -:  964:
        -:  965:    case great_hall:
        -:  966:      //+1 Card
    #####:  967:      drawCard(currentPlayer, state);
        -:  968:
        -:  969:      //+1 Actions
    #####:  970:      state->numActions++;
        -:  971:
        -:  972:      //discard card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);
    #####:  974:      return 0;
        -:  975:
        -:  976:    case minion:
        -:  977:      //+1 action
    #####:  978:      state->numActions++;
        -:  979:
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
    #####:  983:      if (choice1)		//+2 coins
        -:  984:	{
    #####:  985:	  state->coins = state->coins + 2;
        -:  986:	}
        -:  987:
    #####:  988:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  989:	{
        -:  990:	  //discard hand
    #####:  991:	  while(numHandCards(state) > 0)
        -:  992:	    {
    #####:  993:	      discardCard(handPos, currentPlayer, state, 0);
        -:  994:	    }
        -:  995:
        -:  996:	  //draw 4
    #####:  997:	  for (i = 0; i < 4; i++)
        -:  998:	    {
    #####:  999:	      drawCard(currentPlayer, state);
        -: 1000:	    }
        -: 1001:
        -: 1002:	  //other players discard hand and redraw if hand size > 4
    #####: 1003:	  for (i = 0; i < state->numPlayers; i++)
        -: 1004:	    {
    #####: 1005:	      if (i != currentPlayer)
        -: 1006:		{
    #####: 1007:		  if ( state->handCount[i] > 4 )
        -: 1008:		    {
        -: 1009:		      //discard hand
    #####: 1010:		      while( state->handCount[i] > 0 )
        -: 1011:			{
    #####: 1012:			  discardCard(handPos, i, state, 0);
        -: 1013:			}
        -: 1014:
        -: 1015:		      //draw 4
    #####: 1016:		      for (j = 0; j < 4; j++)
        -: 1017:			{
    #####: 1018:			  drawCard(i, state);
        -: 1019:			}
        -: 1020:		    }
        -: 1021:		}
        -: 1022:	    }
        -: 1023:
        -: 1024:	}
    #####: 1025:      return 0;
        -: 1026:
        -: 1027:    case steward:
    #####: 1028:      if (choice1 == 1)
        -: 1029:	{
        -: 1030:	  //+2 cards
    #####: 1031:	  drawCard(currentPlayer, state);
    #####: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
    #####: 1034:      else if (choice1 == 2)
        -: 1035:	{
        -: 1036:	  //+2 coins
    #####: 1037:	  state->coins = state->coins + 2;
        -: 1038:	}
        -: 1039:      else
        -: 1040:	{
        -: 1041:	  //trash 2 cards in hand
    #####: 1042:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1043:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1044:	}
        -: 1045:
        -: 1046:      //discard card from hand
    #####: 1047:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1048:      return 0;
        -: 1049:
        -: 1050:    case tribute:
    #####: 1051:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1052:	if (state->deckCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	  state->deckCount[nextPlayer]--;
        -: 1055:	}
    #####: 1056:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1057:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1058:	  state->discardCount[nextPlayer]--;
        -: 1059:	}
        -: 1060:	else{
        -: 1061:	  //No Card to Reveal
        -: 1062:	  if (DEBUG){
        -: 1063:	    printf("No cards to reveal\n");
        -: 1064:	  }
        -: 1065:	}
        -: 1066:      }
        -: 1067:
        -: 1068:      else{
    #####: 1069:	if (state->deckCount[nextPlayer] == 0){
    #####: 1070:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1071:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1072:	    state->deckCount[nextPlayer]++;
    #####: 1073:	    state->discard[nextPlayer][i] = -1;
    #####: 1074:	    state->discardCount[nextPlayer]--;
        -: 1075:	  }
        -: 1076:
    #####: 1077:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1078:	}
    #####: 1079:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:	state->deckCount[nextPlayer]--;
    #####: 1082:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:	state->deckCount[nextPlayer]--;
        -: 1085:      }
        -: 1086:
    #####: 1087:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1088:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1089:	state->playedCardCount++;
    #####: 1090:	tributeRevealedCards[1] = -1;
        -: 1091:      }
        -: 1092:
    #####: 1093:      for (i = 0; i <= 2; i ++){
    #####: 1094:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1095:	  state->coins += 2;
        -: 1096:	}
        -: 1097:
    #####: 1098:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1099:	  drawCard(currentPlayer, state);
    #####: 1100:	  drawCard(currentPlayer, state);
        -: 1101:	}
        -: 1102:	else{//Action Card
    #####: 1103:	  state->numActions = state->numActions + 2;
        -: 1104:	}
        -: 1105:      }
        -: 1106:
    #####: 1107:      return 0;
        -: 1108:
        -: 1109:    case ambassador:
    #####: 1110:      j = 0;		//used to check if player has enough cards to discard
        -: 1111:
    #####: 1112:      if (choice2 > 2 || choice2 < 0)
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      if (choice1 == handPos)
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:
    #####: 1122:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:	{
    #####: 1124:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1125:	    {
    #####: 1126:	      j++;
        -: 1127:	    }
        -: 1128:	}
    #####: 1129:      if (j < choice2)
        -: 1130:	{
    #####: 1131:	  return -1;
        -: 1132:	}
        -: 1133:
        -: 1134:      if (DEBUG)
        -: 1135:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1136:
        -: 1137:      //increase supply count for choosen card by amount being discarded
    #####: 1138:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1139:
        -: 1140:      //each other player gains a copy of revealed card
    #####: 1141:      for (i = 0; i < state->numPlayers; i++)
        -: 1142:	{
    #####: 1143:	  if (i != currentPlayer)
        -: 1144:	    {
    #####: 1145:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1146:	    }
        -: 1147:	}
        -: 1148:
        -: 1149:      //discard played card from hand
    #####: 1150:      discardCard(handPos, currentPlayer, state, 0);
        -: 1151:
        -: 1152:      //trash copies of cards returned to supply
    #####: 1153:      for (j = 0; j < choice2; j++)
        -: 1154:	{
    #####: 1155:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1156:	    {
    #####: 1157:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1158:		{
    #####: 1159:		  discardCard(i, currentPlayer, state, 1);
    #####: 1160:		  break;
        -: 1161:		}
        -: 1162:	    }
        -: 1163:	}
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:    case cutpurse:
        -: 1168:
    #####: 1169:      updateCoins(currentPlayer, state, 2);
    #####: 1170:      for (i = 0; i < state->numPlayers; i++)
        -: 1171:	{
    #####: 1172:	  if (i != currentPlayer)
        -: 1173:	    {
    #####: 1174:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1175:		{
    #####: 1176:		  if (state->hand[i][j] == copper)
        -: 1177:		    {
    #####: 1178:		      discardCard(j, i, state, 0);
    #####: 1179:		      break;
        -: 1180:		    }
    #####: 1181:		  if (j == state->handCount[i])
        -: 1182:		    {
    #####: 1183:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1184:			{
        -: 1185:			  if (DEBUG)
        -: 1186:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1187:			}
    #####: 1188:		      break;
        -: 1189:		    }
        -: 1190:		}
        -: 1191:
        -: 1192:	    }
        -: 1193:
        -: 1194:	}
        -: 1195:
        -: 1196:      //discard played card from hand
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
        -: 1198:
    #####: 1199:      return 0;
        -: 1200:
        -: 1201:
        -: 1202:    case embargo:
        -: 1203:      //+2 Coins
    #####: 1204:      state->coins = state->coins + 2;
        -: 1205:
        -: 1206:      //see if selected pile is in play
    #####: 1207:      if ( state->supplyCount[choice1] == -1 )
        -: 1208:	{
    #####: 1209:	  return -1;
        -: 1210:	}
        -: 1211:
        -: 1212:      //add embargo token to selected supply pile
    #####: 1213:      state->embargoTokens[choice1]++;
        -: 1214:
        -: 1215:      //trash card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1217:      return 0;
        -: 1218:
        -: 1219:    case outpost:
        -: 1220:
    #####: 1221:      return outpostCard(state, handPos, currentPlayer);
        -: 1222:
        -: 1223:    case salvager:
        -: 1224:
    #####: 1225:      return salvagerCard(state, choice1, currentPlayer, i);
        -: 1226:
        -: 1227:    case sea_hag:
        -: 1228:
     1500: 1229:      return seaHagCard(state, currentPlayer, i);
        -: 1230:
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
     1500: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:
        -: 1268:  //if card is not trashed, added to Played pile
     1500: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
     1500: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1500: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:
        -: 1276:  //set played card to -1
     1500: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:  //remove card from player's hand
     1500: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
     1500: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
     1500: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
     1500: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
     1500: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:
     1500: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
     1674: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:
        -: 1344:  //reset coin count
     1674: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
    10044: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
     8370: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
     5830: 1352:	  state->coins += 1;
        -: 1353:	}
     2540: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
     2540: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}
        -: 1362:    }
        -: 1363:
        -: 1364:  //add bonus
     1674: 1365:  state->coins += bonus;
        -: 1366:
     1674: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
Testing Smithy!
Test Passed: 300, Test Failed: 0
File 'dominion.c'
Lines executed:28.67% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:17
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    83406:    8:int compare(const void* a, const void* b) {
    83406:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    83406:   11:  if (*(int*)a < *(int*)b)
    19904:   12:    return -1;
    63502:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     4100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     4100:   44:  SelectStream(1);
     4100:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     4100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     2081:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2019:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22209:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   222090:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   201900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2019:   73:  if (numPlayers == 2)
        -:   74:    {
     1081:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      938:   77:  else if (numPlayers == 3)
        -:   78:    {
      938:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2019:   87:  if (numPlayers == 2)
        -:   88:    {
     1081:   89:      state->supplyCount[estate] = 8;
     1081:   90:      state->supplyCount[duchy] = 8;
     1081:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      938:   95:      state->supplyCount[estate] = 12;
      938:   96:      state->supplyCount[duchy] = 12;
      938:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2019:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2019:  102:  state->supplyCount[silver] = 40;
     2019:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42399:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   335175:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   314730:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    19935:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     4548:  115:		  if (numPlayers == 2){
     1226:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
     1048:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    17661:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    19935:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   294795:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6995:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     4976:  140:      state->deckCount[i] = 0;
    19904:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    14928:  143:	  state->deck[i][j] = estate;
    14928:  144:	  state->deckCount[i]++;
        -:  145:	}
    39808:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    34832:  148:	  state->deck[i][j] = copper;
    34832:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6995:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     4976:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6995:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     4976:  166:      state->handCount[i] = 0;
     4976:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i,temphand state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    56532:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    54513:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2019:  182:  state->outpostPlayed = 0;
     2019:  183:  state->phase = 0;
     2019:  184:  state->numActions = 1;
     2019:  185:  state->numBuys = 1;
     2019:  186:  state->playedCardCount = 0;
     2019:  187:  state->whoseTurn = 0;
     2019:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12114:  192:  for (it = 0; it < 5; it++){
    10095:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     2019:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2019:  198:  return 0;
        -:  199:}
        -:  200:
     4988:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     4988:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     4988:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     4988:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    62028:  214:  while (state->deckCount[player] > 0) {
    52052:  215:    card = floor(Random() * state->deckCount[player]);
    52052:  216:    newDeck[newDeckPos] = state->deck[player][card];
    52052:  217:    newDeckPos++;
   315683:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   263631:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    52052:  221:    state->deckCount[player]--;
        -:  222:  }
    57040:  223:  for (i = 0; i < newDeckPos; i++) {
    52052:  224:    state->deck[player][i] = newDeck[i];
    52052:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4988:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     8200:  346:int whoseTurn(struct gameState *state) {
     8200:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   144115:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   144115:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     2304:  533:    for (i = 0; i < state->discardCount[player];i++){
     2292:  534:      state->deck[player][i] = state->discard[player][i];
     2292:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       12:  538:    state->deckCount[player] = state->discardCount[player];
       12:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       12:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       12:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       12:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       12:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       12:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       12:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  563:    state->deckCount[player]--;
       12:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   144103:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   144103:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   144103:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   144103:  576:    state->deckCount[player]--;
   144103:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   144115:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      500:  646:int adventurerCard(int drawntreasure,
        -:  647:                   struct gameState *state,
        -:  648:                   int currentPlayer,
        -:  649:                   int z,
        -:  650:                   int cardDrawn,
        -:  651:                   int temphand[])
        -:  652:{
   129620:  653:    while(drawntreasure<2){
   128620:  654:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:	  shuffle(currentPlayer, state);
        -:  656:	}
   128620:  657:	drawCard(currentPlayer, state);
   128620:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   128620:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
     1000:  660:          drawntreasure++;
        -:  661:          //printf("Drawn Treasure %d", drawntreasure);
        -:  662:	}else{
        -:  663:          //printf("z is %d\n",z);
   127620:  664:          temphand[z]=cardDrawn;
   127620:  665:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   127620:  666:          z++;
        -:  667:	}
        -:  668:      }
   128620:  669:      while(z-1>=0){
   127620:  670:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   127620:  671:        z=z-1;
        -:  672:      }
      500:  673:      return 0;
        -:  674:}
        -:  675:
     1800:  676:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  677:{
        -:  678:      //+3 Cards
     7200:  679:      for (i = 0; i < 3; i++)
        -:  680:	{
     5400:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:
        -:  684:      //discard card from hand
     1800:  685:      discardCard(handPos, currentPlayer, state, 0);
     1800:  686:      return 0;
        -:  687:}
        -:  688:
    #####:  689:int outpostCard(struct gameState *state, int handPos, int currentPlayer)
        -:  690:{
        -:  691:          //set outpost flag
    #####:  692:      state->outpostPlayed--;
        -:  693:
        -:  694:      //discard card
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
    #####:  696:      return 0;
        -:  697:}
        -:  698:
     1800:  699:int seaHagCard(struct gameState *state, int currentPlayer, int i)
        -:  700:{
     6192:  701:            for (i = 0; i < state->numPlayers; i++){
     4392:  702:	if (i != currentPlayer){
     2598:  703:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
     2598:  704:	  state->discardCount[i]++;
     2598:  705:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  706:	}
        -:  707:      }
     1800:  708:      return 0;
        -:  709:}
        -:  710:
    #####:  711:int salvagerCard(struct gameState *state, int choice1, int currentPlayer, int handPos)
        -:  712:{
        -:  713:          //+1 buy
    #####:  714:      state->numBuys++;
        -:  715:
    #####:  716:      if (choice1)
        -:  717:	{
        -:  718:	  //gain coins equal to trashed card
    #####:  719:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  720:	  //trash card
    #####:  721:	  discardCard(choice1, currentPlayer, state, 1);
        -:  722:	}
        -:  723:
        -:  724:      //discard card
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
        -:  726:
    #####:  727:      return 0;
        -:  728:}
        -:  729:
     4100:  730:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  731:{
        -:  732:  int i;
        -:  733:  int j;
        -:  734:  int k;
        -:  735:  int x;
        -:  736:  int index;
     4100:  737:  int currentPlayer = whoseTurn(state);
     4100:  738:  int nextPlayer = currentPlayer + 1;
        -:  739:
     4100:  740:  int tributeRevealedCards[2] = {-1, -1};
        -:  741:  int temphand[MAX_HAND];// moved above the if statement
     4100:  742:  int drawntreasure=0;
        -:  743:  int cardDrawn;
     4100:  744:  int z = 0;// this is the counter for the temp hand
     4100:  745:  if (nextPlayer > (state->numPlayers - 1)){
       12:  746:    nextPlayer = 0;
        -:  747:  }
        -:  748:
        -:  749:
        -:  750:  //uses switch to select card and perform actions
     4100:  751:  switch( card )
        -:  752:    {
        -:  753:    case adventurer:
        -:  754:
      500:  755:        return adventurerCard(drawntreasure,state,currentPlayer,0,cardDrawn,temphand);
        -:  756:
        -:  757:      //return adventurerCard(drawntreasure,state,currentPlayer,z,cardDrawn,temphand);
        -:  758:    case council_room:
        -:  759:      //+4 Cards
    #####:  760:      for (i = 0; i < 4; i++)
        -:  761:	{
    #####:  762:	  drawCard(currentPlayer, state);
        -:  763:	}
        -:  764:
        -:  765:      //+1 Buy
    #####:  766:      state->numBuys++;
        -:  767:
        -:  768:      //Each other player draws a card
    #####:  769:      for (i = 0; i < state->numPlayers; i++)
        -:  770:	{
    #####:  771:	  if ( i != currentPlayer )
        -:  772:	    {
    #####:  773:	      drawCard(i, state);
        -:  774:	    }
        -:  775:	}
        -:  776:
        -:  777:      //put played card in played card pile
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
    #####:  780:      return 0;
        -:  781:
        -:  782:    case feast:
        -:  783:      //gain card with cost up to 5
        -:  784:      //Backup hand
    #####:  785:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  786:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  787:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  788:      }
        -:  789:      //Backup hand
        -:  790:
        -:  791:      //Update Coins for Buy
    #####:  792:      updateCoins(currentPlayer, state, 5);
    #####:  793:      x = 1;//Condition to loop on
    #####:  794:      while( x == 1) {//Buy one card
    #####:  795:	if (supplyCount(choice1, state) <= 0){
        -:  796:	  if (DEBUG)
        -:  797:	    printf("None of that card left, sorry!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  801:	  }
        -:  802:	}
    #####:  803:	else if (state->coins < getCost(choice1)){
    #####:  804:	  printf("That card is too expensive!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  808:	  }
        -:  809:	}
        -:  810:	else{
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
    #####:  816:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  817:	  x = 0;//No more buying cards
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
        -:  823:	}
        -:  824:      }
        -:  825:
        -:  826:      //Reset Hand
    #####:  827:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  828:	state->hand[currentPlayer][i] = temphand[i];
    #####:  829:	temphand[i] = -1;
        -:  830:      }
        -:  831:      //Reset Hand
        -:  832:
    #####:  833:      return 0;
        -:  834:
        -:  835:    case gardens:
    #####:  836:      return -1;
        -:  837:
        -:  838:    case mine:
    #####:  839:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  840:
    #####:  841:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      if (choice2 > treasure_map || choice2 < curse)
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:
    #####:  851:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  852:	{
    #####:  853:	  return -1;
        -:  854:	}
        -:  855:
    #####:  856:      gainCard(choice2, state, 2, currentPlayer);
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:
        -:  861:      //discard trashed card
    #####:  862:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  863:	{
    #####:  864:	  if (state->hand[currentPlayer][i] == j)
        -:  865:	    {
    #####:  866:	      discardCard(i, currentPlayer, state, 0);
    #####:  867:	      break;
        -:  868:	    }
        -:  869:	}
        -:  870:
    #####:  871:      return 0;
        -:  872:
        -:  873:    case remodel:
    #####:  874:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      gainCard(choice2, state, 0, currentPlayer);
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:	{
    #####:  889:	  if (state->hand[currentPlayer][i] == j)
        -:  890:	    {
    #####:  891:	      discardCard(i, currentPlayer, state, 0);
    #####:  892:	      break;
        -:  893:	    }
        -:  894:	}
        -:  895:
        -:  896:
    #####:  897:      return 0;
        -:  898:
        -:  899:    case smithy:
        -:  900:
     1800:  901:      return smithyCard(i, currentPlayer, state, handPos);
        -:  902:
        -:  903:    case village:
        -:  904:      //+1 Card
    #####:  905:      drawCard(currentPlayer, state);
        -:  906:
        -:  907:      //+2 Actions
    #####:  908:      state->numActions = state->numActions + 2;
        -:  909:
        -:  910:      //discard played card from hand
    #####:  911:      discardCard(handPos, currentPlayer, state, 0);
    #####:  912:      return 0;
        -:  913:
        -:  914:    case baron:
    #####:  915:      state->numBuys++;//Increase buys by 1!
    #####:  916:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  917:	int p = 0;//Iterator for hand!
    #####:  918:	int card_not_discarded = 1;//Flag for discard set!
    #####:  919:	while(card_not_discarded){
    #####:  920:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  921:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  922:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  923:	    state->discardCount[currentPlayer]++;
    #####:  924:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  925:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  926:	    }
    #####:  927:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  928:	    state->handCount[currentPlayer]--;
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
    #####:  931:	  else if (p > state->handCount[currentPlayer]){
        -:  932:	    if(DEBUG) {
        -:  933:	      printf("No estate cards in your hand, invalid choice\n");
        -:  934:	      printf("Must gain an estate if there are any\n");
        -:  935:	    }
    #####:  936:	    if (supplyCount(estate, state) > 0){
    #####:  937:	      gainCard(estate, state, 0, currentPlayer);
    #####:  938:	      state->supplyCount[estate]--;//Decrement estates
    #####:  939:	      if (supplyCount(estate, state) == 0){
    #####:  940:		isGameOver(state);
        -:  941:	      }
        -:  942:	    }
    #####:  943:	    card_not_discarded = 0;//Exit the loop
        -:  944:	  }
        -:  945:
        -:  946:	  else{
    #####:  947:	    p++;//Next card
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:
        -:  952:      else{
    #####:  953:	if (supplyCount(estate, state) > 0){
    #####:  954:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  955:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  956:	  if (supplyCount(estate, state) == 0){
    #####:  957:	    isGameOver(state);
        -:  958:	  }
        -:  959:	}
        -:  960:      }
        -:  961:
        -:  962:
    #####:  963:      return 0;
        -:  964:
        -:  965:    case great_hall:
        -:  966:      //+1 Card
    #####:  967:      drawCard(currentPlayer, state);
        -:  968:
        -:  969:      //+1 Actions
    #####:  970:      state->numActions++;
        -:  971:
        -:  972:      //discard card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);
    #####:  974:      return 0;
        -:  975:
        -:  976:    case minion:
        -:  977:      //+1 action
    #####:  978:      state->numActions++;
        -:  979:
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
        -:  982:
    #####:  983:      if (choice1)		//+2 coins
        -:  984:	{
    #####:  985:	  state->coins = state->coins + 2;
        -:  986:	}
        -:  987:
    #####:  988:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  989:	{
        -:  990:	  //discard hand
    #####:  991:	  while(numHandCards(state) > 0)
        -:  992:	    {
    #####:  993:	      discardCard(handPos, currentPlayer, state, 0);
        -:  994:	    }
        -:  995:
        -:  996:	  //draw 4
    #####:  997:	  for (i = 0; i < 4; i++)
        -:  998:	    {
    #####:  999:	      drawCard(currentPlayer, state);
        -: 1000:	    }
        -: 1001:
        -: 1002:	  //other players discard hand and redraw if hand size > 4
    #####: 1003:	  for (i = 0; i < state->numPlayers; i++)
        -: 1004:	    {
    #####: 1005:	      if (i != currentPlayer)
        -: 1006:		{
    #####: 1007:		  if ( state->handCount[i] > 4 )
        -: 1008:		    {
        -: 1009:		      //discard hand
    #####: 1010:		      while( state->handCount[i] > 0 )
        -: 1011:			{
    #####: 1012:			  discardCard(handPos, i, state, 0);
        -: 1013:			}
        -: 1014:
        -: 1015:		      //draw 4
    #####: 1016:		      for (j = 0; j < 4; j++)
        -: 1017:			{
    #####: 1018:			  drawCard(i, state);
        -: 1019:			}
        -: 1020:		    }
        -: 1021:		}
        -: 1022:	    }
        -: 1023:
        -: 1024:	}
    #####: 1025:      return 0;
        -: 1026:
        -: 1027:    case steward:
    #####: 1028:      if (choice1 == 1)
        -: 1029:	{
        -: 1030:	  //+2 cards
    #####: 1031:	  drawCard(currentPlayer, state);
    #####: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
    #####: 1034:      else if (choice1 == 2)
        -: 1035:	{
        -: 1036:	  //+2 coins
    #####: 1037:	  state->coins = state->coins + 2;
        -: 1038:	}
        -: 1039:      else
        -: 1040:	{
        -: 1041:	  //trash 2 cards in hand
    #####: 1042:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1043:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1044:	}
        -: 1045:
        -: 1046:      //discard card from hand
    #####: 1047:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1048:      return 0;
        -: 1049:
        -: 1050:    case tribute:
    #####: 1051:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1052:	if (state->deckCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	  state->deckCount[nextPlayer]--;
        -: 1055:	}
    #####: 1056:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1057:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1058:	  state->discardCount[nextPlayer]--;
        -: 1059:	}
        -: 1060:	else{
        -: 1061:	  //No Card to Reveal
        -: 1062:	  if (DEBUG){
        -: 1063:	    printf("No cards to reveal\n");
        -: 1064:	  }
        -: 1065:	}
        -: 1066:      }
        -: 1067:
        -: 1068:      else{
    #####: 1069:	if (state->deckCount[nextPlayer] == 0){
    #####: 1070:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1071:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1072:	    state->deckCount[nextPlayer]++;
    #####: 1073:	    state->discard[nextPlayer][i] = -1;
    #####: 1074:	    state->discardCount[nextPlayer]--;
        -: 1075:	  }
        -: 1076:
    #####: 1077:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1078:	}
    #####: 1079:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:	state->deckCount[nextPlayer]--;
    #####: 1082:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:	state->deckCount[nextPlayer]--;
        -: 1085:      }
        -: 1086:
    #####: 1087:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1088:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1089:	state->playedCardCount++;
    #####: 1090:	tributeRevealedCards[1] = -1;
        -: 1091:      }
        -: 1092:
    #####: 1093:      for (i = 0; i <= 2; i ++){
    #####: 1094:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1095:	  state->coins += 2;
        -: 1096:	}
        -: 1097:
    #####: 1098:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1099:	  drawCard(currentPlayer, state);
    #####: 1100:	  drawCard(currentPlayer, state);
        -: 1101:	}
        -: 1102:	else{//Action Card
    #####: 1103:	  state->numActions = state->numActions + 2;
        -: 1104:	}
        -: 1105:      }
        -: 1106:
    #####: 1107:      return 0;
        -: 1108:
        -: 1109:    case ambassador:
    #####: 1110:      j = 0;		//used to check if player has enough cards to discard
        -: 1111:
    #####: 1112:      if (choice2 > 2 || choice2 < 0)
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      if (choice1 == handPos)
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:
    #####: 1122:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:	{
    #####: 1124:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1125:	    {
    #####: 1126:	      j++;
        -: 1127:	    }
        -: 1128:	}
    #####: 1129:      if (j < choice2)
        -: 1130:	{
    #####: 1131:	  return -1;
        -: 1132:	}
        -: 1133:
        -: 1134:      if (DEBUG)
        -: 1135:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1136:
        -: 1137:      //increase supply count for choosen card by amount being discarded
    #####: 1138:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1139:
        -: 1140:      //each other player gains a copy of revealed card
    #####: 1141:      for (i = 0; i < state->numPlayers; i++)
        -: 1142:	{
    #####: 1143:	  if (i != currentPlayer)
        -: 1144:	    {
    #####: 1145:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1146:	    }
        -: 1147:	}
        -: 1148:
        -: 1149:      //discard played card from hand
    #####: 1150:      discardCard(handPos, currentPlayer, state, 0);
        -: 1151:
        -: 1152:      //trash copies of cards returned to supply
    #####: 1153:      for (j = 0; j < choice2; j++)
        -: 1154:	{
    #####: 1155:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1156:	    {
    #####: 1157:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1158:		{
    #####: 1159:		  discardCard(i, currentPlayer, state, 1);
    #####: 1160:		  break;
        -: 1161:		}
        -: 1162:	    }
        -: 1163:	}
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:    case cutpurse:
        -: 1168:
    #####: 1169:      updateCoins(currentPlayer, state, 2);
    #####: 1170:      for (i = 0; i < state->numPlayers; i++)
        -: 1171:	{
    #####: 1172:	  if (i != currentPlayer)
        -: 1173:	    {
    #####: 1174:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1175:		{
    #####: 1176:		  if (state->hand[i][j] == copper)
        -: 1177:		    {
    #####: 1178:		      discardCard(j, i, state, 0);
    #####: 1179:		      break;
        -: 1180:		    }
    #####: 1181:		  if (j == state->handCount[i])
        -: 1182:		    {
    #####: 1183:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1184:			{
        -: 1185:			  if (DEBUG)
        -: 1186:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1187:			}
    #####: 1188:		      break;
        -: 1189:		    }
        -: 1190:		}
        -: 1191:
        -: 1192:	    }
        -: 1193:
        -: 1194:	}
        -: 1195:
        -: 1196:      //discard played card from hand
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
        -: 1198:
    #####: 1199:      return 0;
        -: 1200:
        -: 1201:
        -: 1202:    case embargo:
        -: 1203:      //+2 Coins
    #####: 1204:      state->coins = state->coins + 2;
        -: 1205:
        -: 1206:      //see if selected pile is in play
    #####: 1207:      if ( state->supplyCount[choice1] == -1 )
        -: 1208:	{
    #####: 1209:	  return -1;
        -: 1210:	}
        -: 1211:
        -: 1212:      //add embargo token to selected supply pile
    #####: 1213:      state->embargoTokens[choice1]++;
        -: 1214:
        -: 1215:      //trash card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1217:      return 0;
        -: 1218:
        -: 1219:    case outpost:
        -: 1220:
    #####: 1221:      return outpostCard(state, handPos, currentPlayer);
        -: 1222:
        -: 1223:    case salvager:
        -: 1224:
    #####: 1225:      return salvagerCard(state, choice1, currentPlayer, i);
        -: 1226:
        -: 1227:    case sea_hag:
        -: 1228:
     1800: 1229:      return seaHagCard(state, currentPlayer, i);
        -: 1230:
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
     1800: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:
        -: 1268:  //if card is not trashed, added to Played pile
     1800: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
     1800: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1800: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:
        -: 1276:  //set played card to -1
     1800: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:  //remove card from player's hand
     1800: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
     1800: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
     1800: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
     1800: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
     1800: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:
     1800: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
     2019: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:
        -: 1344:  //reset coin count
     2019: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
    12114: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
    10095: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
     7031: 1352:	  state->coins += 1;
        -: 1353:	}
     3064: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
     3064: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}
        -: 1362:    }
        -: 1363:
        -: 1364:  //add bonus
     2019: 1365:  state->coins += bonus;
        -: 1366:
     2019: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
